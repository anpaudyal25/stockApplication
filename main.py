# -*- coding: utf-8 -*-
"""project3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ttB-YCLStxkvuDVK1N2i0s4RgQ947UhK
"""

!pip install yfinance

!pip install langchain_google_genai

#from langchain_google_genai import ChatGoogleGenerativeAI
#from langchain import LLMChain
#from langchain import PromptTemplate


import yfinance as yf
import matplotlib.pyplot as plt
import pandas as pd
import streamlit as st
import os

# os.environ['GOOGLE_API_KEY'] = st.secrets['GOOGLE_API_KEY']

#os.environ['GOOGLE_API_KEY'] = st.secrets["GOOGLE_API_KEY"]

# Initialize Google's Gemini model
#gemini_model = ChatGoogleGenerativeAI(model = "gemini-2.5-flash")

def get_stock_data(symbol, period):
    """
    Fetch stock data from Yahoo Finance.

    Parameters:
    symbol (str): Stock symbol.
    period (str): Time period of the data. Can be '1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'ytd', 'max'.

    Returns:
    pandas.DataFrame: Stock data.
    """
    return yf.download(symbol, period=period)

def calculate_moving_averages(data):
    """
    Calculate 20, 50, and 200 moving averages.

    Parameters:
    data (pandas.DataFrame): Stock data.

    Returns:
    pandas.DataFrame: Data with moving averages.
    """
    data['MA_20'] = data['Close'].rolling(window=20).mean()
    data['MA_50'] = data['Close'].rolling(window=50).mean()
    data['MA_200'] = data['Close'].rolling(window=200).mean()
    return data

def calculate_rsi(data):
    """
    Calculate Relative Strength Index (RSI).

    Parameters:
    data (pandas.DataFrame): Stock data.

    Returns:
    pandas.DataFrame: Data with RSI.
    """
    delta = data['Close'].diff(1)
    up_days = delta.copy()
    up_days[delta <= 0] = 0
    down_days = abs(delta.copy())
    down_days[delta > 0] = 0
    roll_up1 = up_days.ewm(com=13-1, adjust=False).mean()
    roll_down1 = down_days.ewm(com=13-1, adjust=False).mean().add(0.000001)
    RS = roll_up1 / roll_down1
    RSI = 100.0 - (100.0 / (1.0 + RS))
    data['RSI'] = RSI
    return data

def find_entry_point(data):
    """
    Find entry point when 20, 50, and 200 moving averages meet at a given point.

    Parameters:
    data (pandas.DataFrame): Stock data with moving averages.

    Returns:
    list: Entry points.
    """
    entry_points = []
    for i in range(len(data)):
        if i > 200: # Ensure we have enough data to calculate MA_200
            if round(data['MA_20'].iloc[i], 2) == round(data['MA_50'].iloc[i], 2) == round(data['MA_200'].iloc[i], 2):
                entry_points.append((data.index[i], round(data['Close'].iloc[i], 2)))
                print(f"Entry point found at {data.index[i]} with price {round(data['Close'].iloc[i], 2)}")
        else:
            continue
        if len(entry_points) > 0:
            break
        else:
            continue
        break

def plot_chart(data):
        # Plot chart with moving averages and RSI
        plt.figure(figsize=(12,6))
        plt.plot(data.index, data['Close'], label='Close Price')
        plt.plot(data.index, data['MA_20'], label='MA_20')
        plt.plot(data.index, data['MA_50'], label='MA_50')
        plt.plot(data.index, data['MA_200'], label='MA_200')

        # Add title and labels
        plt.title('Stock Chart')
        plt.xlabel('Date')
        plt.ylabel('Price ($)')

        # Add legend and show plot
        plt.legend(loc='upper left')

def main():

            symbol = input("Enter stock symbol or scan graph or press enter for daily chart of Apple stock: ")

            if symbol == "":
                symbol = "AAPL"

            period = input("Enter time period ('1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'ytd', 'max'): ")

            if period == "":
                period = "3mo"

            try:
                    stock_data = get_stock_data(symbol=symbol.upper(), period=period)

                    if not stock_data.empty:
                        stock_data_with_ma_and_rsi = calculate_moving_averages(calculate_rsi(stock_data))

                        find_entry_point(stock_data_with_ma_and_rsi)

                        plot_chart(stock_data_with_ma_and_rsi)

                        print(f"RSI value is {stock_data_with_ma_and_rsi.iloc[-1]['RSI']}")

                        if stock_data_with_ma_and_rsi.iloc[-1]['RSI'] < 30 and stock_data_with_ma_and_rsi.iloc[-1]['Close'] > stock_data_with_ma_and_rsi.iloc[-1]['MA_200']:
                            print("Buy signal generated")
                        elif stock_data_with_ma_and_rsi.iloc[-1]['RSI'] > 70 and stock_data_with_ma_and_rsi.iloc[-1]['Close'] < stock_data_with_ma_and_rsi.iloc[-1]['MA_200']:
                            print("Sell signal generated")
                        else:
                            print("No buy or sell signal generated")

                    else:
                        print("No stock found with given symbol.")

            except Exception as e:
                print(f"An error occurred: {e}")

if __name__ == "__main__":
   main()

